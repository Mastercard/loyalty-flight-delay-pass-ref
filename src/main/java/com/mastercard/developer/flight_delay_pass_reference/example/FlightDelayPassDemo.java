/*
 *  Copyright (c) 2021 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Flight Delay Pass API
 * The Loyalty Flight Delay Pass APIs offers cardholders, via their issuers, the ability to  access the Lounge in airport if flight gets delayed.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mastercard.developer.flight_delay_pass_reference.example;

import com.mastercard.developer.flight_delay_pass_reference.ApiClient;
import com.mastercard.developer.flight_delay_pass_reference.ApiException;
import com.mastercard.developer.flight_delay_pass_reference.api.FlightDelayControllerApi;
import com.mastercard.developer.flight_delay_pass_reference.model.*;
import com.mastercard.developer.interceptors.OkHttp2OAuth1Interceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

public class FlightDelayPassDemo {

    private static Logger logger = LoggerFactory.getLogger(FlightDelayPassDemo.class);

    public static void main(String[] args) throws Exception {

        RequestHelper.loadProperties();

        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath(RequestHelper.getBaseURL());
        apiClient.getHttpClient().interceptors().add(new OkHttp2OAuth1Interceptor(RequestHelper.getConsumerkey(),RequestHelper.getPrivateKey()));
        apiClient.setDebugging(true);
        FlightDelayControllerApi flightDelayControllerApi = new FlightDelayControllerApi(apiClient);

        if (runThisScenario(args, "registration")) {
            executeRegistrationScenario(flightDelayControllerApi);
        }

        if (runThisScenario(args, "error")) {
            executeErrorScenario(flightDelayControllerApi);
        }
    }


    private static void executeRegistrationScenario(FlightDelayControllerApi flightDelayControllerApi) {
        UserRequest userRequest = getRegistrationObject();
        try {
            printMessage("STARTING FLIGHT DELAY PASS REFERENCE APP RESPONSE FROM COMMAND LINE");
            RegistrionResponse result = flightDelayControllerApi.postRegistration("api-key",userRequest );
            logger.info("Parsed Response---------------");
            logger.info(" {} ",result);
        } catch (Exception e) {
            logger.error("Exception when calling Registration");
        }
    }

    private static void executeErrorScenario(FlightDelayControllerApi flightDelayControllerApi) {
        UserRequest userRequest = new UserRequest();
        userRequest.setDepartureDate("ZZZZZZZZZZ");
        try {
            printMessage("STARTING FLIGHT DELAY PASS REFRENCE APP ERROR SCENARIO FROM COMMAND LINE");
            flightDelayControllerApi.postRegistration("api-key",userRequest );
        } catch (ApiException e) {
            logger.error("Exception when calling Flight delay service mock");
        }
    }

    private static void printMessage(String scenario) {
        String printDesign = "--------------------------------------------------------------------";
        logger.info(printDesign);
        logger.info(printDesign);
        logger.info("{} ---------------", scenario);
        logger.info(printDesign);
        logger.info(printDesign);
    }


    private static UserRequest getRegistrationObject() {
        UserRequest userRequest = new UserRequest();
        User userDetails = new User();
        List<AdditionalPassengerDetails> additionalPassengerDetails = new ArrayList<>();
        AdditionalPassengerDetails additionalPassenger = new AdditionalPassengerDetails();
        List<PhoneNumber> phoneNumbers = new ArrayList<>();
        PhoneNumber phoneNumber = new PhoneNumber();
        Email email = new Email();
        Name name = new Name();
        List<Account> accountsList = new ArrayList<>();
        List<Email> emails = new ArrayList<>();

        email.setValue("john5105@gmail.com");
        emails.add(email);
        userDetails.setEmails(emails);

        name.setFamilyName("Smitherines");
        name.setGivenName("Johnathon");
        name.setHonorificPrefix("Mr.");
        userDetails.setName(name);
        userDetails.setUserId("user5105");
        additionalPassenger.setName(name);
        additionalPassengerDetails.add(additionalPassenger);


        Account accounts = new Account();
        accounts.setIca(1017);
        accounts.setPan("0000000000091224");
        accountsList.add(accounts);

        phoneNumber.setCountryCode("408");
        phoneNumber.setIsDefault(true);
        phoneNumber.setLabel("Mr");
        phoneNumber.setValue("404-567-883#");
        phoneNumbers.add(phoneNumber);
        userDetails.setPhoneNumbers(phoneNumbers);

        userRequest.setAccounts(accountsList);
        userRequest.setAdditionalPassengerDetails(additionalPassengerDetails);
        userRequest.setArrivalAirportCode("STL");
        userRequest.setDepartureAirportCode("JFK");
        userRequest.setDepartureAirportCode("11/05/2020");
        userRequest.setFlightNumber("AL1543");
        userRequest.setProposition("PROP");
        userRequest.setUser(userDetails);

        return userRequest;
    }

    private static boolean runThisScenario(String[] args, String scenario) {
        return (args != null && args.length > 0 && args[0].contains(scenario)) || (args == null || args.length == 0);
    }


}
