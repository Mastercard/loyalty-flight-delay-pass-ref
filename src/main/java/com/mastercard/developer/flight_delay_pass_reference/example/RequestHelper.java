/*
 *  Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Airport Experience API
 * The Loyalty Airport Lounge APIs offers cardholders, via their issuers, the ability to  access the Mastercard Airport Lounge service through this digital channel.  Cardholders can search for airport lounges, get airport lounge details,  access airport lounges via their personalized Digital Membership Card,  and access their lounge history. These APIs can be used to build a rich,  interactive airport experience within the issuer's existing mobile application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.flight_delay_pass_reference.example;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.util.Properties;

public class RequestHelper {
	
	private static String CONSUMER_KEY ="mastercard.flight.delay.pass.ref.app.consumer.key";
	
	private static String KEYSTORE_PATH ="mastercard.flight.delay.pass.ref.app.keystore.path";
	
	private static String KEYSTORE_PASSWORD ="mastercard.flight.delay.pass.ref.app.keystore.password";
	
	private static String KEYSTORE_ALIAS ="mastercard.flight.delay.pass.ref.app.app.keystore.alias";
	
	private static String BASE_URL = "mastercard.flight.delay.pass.ref.app.url";
	
	private static Properties prop = null;
	
	 public static PrivateKey getPrivateKey() throws Exception {
		 KeyStore ks = KeyStore.getInstance("PKCS12");
		 ks.load(new FileInputStream(prop.getProperty(KEYSTORE_PATH)), prop.getProperty(KEYSTORE_PASSWORD).toCharArray());
		 PrivateKey privateKey = (PrivateKey) ks.getKey(prop.getProperty(KEYSTORE_ALIAS), prop.getProperty(KEYSTORE_PASSWORD).toCharArray());
		 if (privateKey == null) {
			 throw new Exception("No key found.");
	     }
		 return privateKey;
	 }
	 
	 public static String getConsumerkey() {
		 return prop.getProperty(CONSUMER_KEY);
	 }
	 
	 public static String getBaseURL() {
		 return prop.getProperty(BASE_URL);
	 }
	 
	public static void loadProperties() {
		if (prop == null || prop.isEmpty()) {
			try (InputStream input = RequestHelper.class.getClassLoader()
					.getResourceAsStream("application.properties")) {
				prop = new Properties();
				if (input == null) {
					return;
				}
				prop.load(input);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
