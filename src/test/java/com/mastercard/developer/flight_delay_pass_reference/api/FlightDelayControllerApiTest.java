/*
 * FlightDelayPass API
 * FlightDelayPass application
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.flight_delay_pass_reference.api;

import com.mastercard.developer.flight_delay_pass_reference.ApiClient;
import com.mastercard.developer.flight_delay_pass_reference.ApiException;
import com.mastercard.developer.flight_delay_pass_reference.ApiResponse;
import com.mastercard.developer.flight_delay_pass_reference.ProgressRequestBody;
import com.mastercard.developer.flight_delay_pass_reference.model.RegistrionResponse;
import com.mastercard.developer.flight_delay_pass_reference.model.UserRequest;
import com.squareup.okhttp.Call;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.when;

/**
 * API tests for FlightDelayControllerApi
 */
@Ignore
public class FlightDelayControllerApiTest {

    private FlightDelayControllerApi api;

    @Mock
    private ApiClient apiClientMock;

    @Mock
    private Call call;

    @Before
    public void setUp() throws ApiException {
        MockitoAnnotations.initMocks(this);
        api = new FlightDelayControllerApi(apiClientMock);
        when(apiClientMock.buildCall(any(String.class), any(String.class), any(List.class), any(List.class), any(Object.class), any(Map.class), any(Map.class), any(String[].class), (ProgressRequestBody.ProgressRequestListener)isNull())).thenReturn(call);
    }
    /**
     *
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postRegistrationTest() throws ApiException {
        String xOpenapiClientid = "api-key";
        UserRequest userRequest = new UserRequest();
        RegistrionResponse registrationResponse = new RegistrionResponse();
        ApiResponse resp = new ApiResponse(200, null, registrationResponse);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        RegistrionResponse response = api.postRegistration(xOpenapiClientid, userRequest);
        assertEquals(response, registrationResponse);
    }

    @Test(expected = ApiException.class)
    public void createUserTest_Exception() throws ApiException {
        UserRequest userRequest = null;
        String xOpenapiClientid = null;
        RegistrionResponse registrationResponse = new RegistrionResponse();
        ApiResponse resp = new ApiResponse(200, null, registrationResponse);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.postRegistration(xOpenapiClientid, userRequest);
    }

}
